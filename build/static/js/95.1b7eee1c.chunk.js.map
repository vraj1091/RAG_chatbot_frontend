{"version":3,"file":"static/js/95.1b7eee1c.chunk.js","mappings":"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","sources":["pages/Chat.jsx","components/LoadingSpinner.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { apiService } from '../services/apiService.js';\nimport LoadingSpinner from '../components/LoadingSpinner.jsx';\nimport toast from 'react-hot-toast';\n\nfunction Chat() {\n  const [messages, setMessages] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [conversations, setConversations] = useState([]);\n  const [currentConversation, setCurrentConversation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [conversationsLoading, setConversationsLoading] = useState(true);\n  const [chatMode, setChatMode] = useState('rag'); // default to RAG mode\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    loadConversations();\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const loadConversations = async () => {\n    try {\n      setConversationsLoading(true);\n      const data = await apiService.getConversations();\n      setConversations(data);\n      if (data.length === 0) setChatMode('general'); // No docs -> set general mode\n    } catch (err) {\n      toast.error('Failed to load chat history');\n    } finally {\n      setConversationsLoading(false);\n    }\n  };\n\n  const loadConversation = async (conversationId) => {\n    try {\n      setLoading(true);\n      const messages = await apiService.getConversationMessages(conversationId);\n      setCurrentConversation(conversations.find(c => c.id === conversationId));\n      setMessages(messages);\n    } catch (err) {\n      toast.error('Failed to load conversation');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    if (!currentMessage.trim() || loading) return;\n\n    const userMessage = currentMessage.trim();\n    setCurrentMessage('');\n    setLoading(true);\n\n    const tempMessage = {\n      id: `temp-${Date.now()}`,\n      role: 'user',\n      content: userMessage,\n      created_at: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, tempMessage]);\n\n    try {\n      // Pass chatMode as query param 'mode' to backend\n      const response = await apiService.sendMessage(userMessage, currentConversation?.id, chatMode);\n\n      setMessages(prev => prev.filter(msg => msg.id !== tempMessage.id));\n\n      const newMessages = [\n        {\n          id: `user-${Date.now()}`,\n          role: 'user',\n          content: userMessage,\n          created_at: new Date().toISOString()\n        },\n        {\n          id: `assistant-${Date.now()}`,\n          role: 'assistant',\n          content: response.message,\n          sources: response.sources || [],\n          created_at: new Date().toISOString(),\n          context_used: response.context_used\n        }\n      ];\n\n      setMessages(prev => [...prev, ...newMessages]);\n\n      if (!currentConversation || currentConversation.id !== response.conversation_id) {\n        setCurrentConversation({ \n          id: response.conversation_id,\n          title: userMessage.substring(0, 50) + (userMessage.length > 50 ? '...' : '')\n        });\n        await loadConversations();\n      }\n\n    } catch (err) {\n      toast.error('Failed to send message');\n      setMessages(prev => prev.filter(msg => msg.id !== tempMessage.id));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const startNewConversation = () => {\n    setCurrentConversation(null);\n    setMessages([]);\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 h-[calc(100vh-8rem)] flex\">\n      {/* Conversations Sidebar */}\n      <div className=\"w-80 border-r border-gray-200 flex flex-col\">\n        <div className=\"p-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">ðŸ’¬ Chat History</h2>\n          <button onClick={startNewConversation} className=\"w-full mt-3 btn-primary\">\n            âž• New Chat\n          </button>\n        </div>\n\n        <div className=\"p-4 flex space-x-2\">\n          {/* Mode toggle buttons */}\n          <button\n            className={`flex-1 px-3 py-1 rounded ${\n              chatMode === 'general' ? 'bg-primary-600 text-white' : 'bg-gray-100 text-gray-700'\n            }`}\n            onClick={() => setChatMode('general')}\n          >\n            General Chat\n          </button>\n          <button\n            className={`flex-1 px-3 py-1 rounded ${\n              chatMode === 'rag' ? 'bg-primary-600 text-white' : 'bg-gray-100 text-gray-700'\n            } ${conversations.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}\n            onClick={() => conversations.length > 0 && setChatMode('rag')}\n            disabled={conversations.length === 0}\n            title={conversations.length === 0 ? 'Upload documents to enable RAG mode' : ''}\n          >\n            Document Chat\n          </button>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto\">\n          {conversationsLoading ? (\n            <div className=\"p-4 text-center\">\n              <LoadingSpinner size=\"medium\" />\n              <p className=\"text-sm text-gray-500 mt-2\">Loading...</p>\n            </div>\n          ) : conversations.length > 0 ? (\n            <div className=\"p-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={`p-3 mb-2 rounded-lg cursor-pointer transition-colors ${\n                    currentConversation?.id === conversation.id ? 'bg-primary-50 border-l-4 border-primary-500' : 'hover:bg-gray-50'\n                  }`}\n                  onClick={() => loadConversation(conversation.id)}\n                >\n                  <p className=\"text-sm font-medium text-gray-900 truncate\">{conversation.title}</p>\n                  <p className=\"text-xs text-gray-500\">{formatDate(conversation.created_at)}</p>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"flex flex-col items-center justify-center h-full p-4 text-center\">\n              <span className=\"text-4xl mb-3\">ðŸ’¬</span>\n              <p className=\"text-gray-500 text-sm\">No chat history yet</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Chat Area */}\n      <div className=\"flex-1 flex flex-col\">\n        <div className=\"p-4 border-b border-gray-200 bg-gray-50\">\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            âœ¨ {currentConversation ? currentConversation.title : 'AI RAG Chat'}\n          </h3>\n          <p className=\"text-sm text-gray-500\"></p>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center h-full text-center\">\n\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {chatMode === 'rag' ? 'Start a RAG conversation' : 'Start a general chat'}\n              </h3>\n              <p className=\"text-gray-500 max-w-sm mb-6\">\n                {chatMode === 'rag'\n                  ? 'Ask questions about your uploaded documents.'\n                  : 'Chat freely without document context.'}\n              </p>\n            </div>\n          ) : (\n            <>\n              {messages.map((message) => (\n                <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n                  <div\n                    className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${\n                      message.role === 'user'\n                        ? 'bg-primary-600 text-white ml-auto'\n                        : 'bg-gray-100 text-gray-900'\n                    }`}\n                  >\n                    <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">{message.content}</p>\n\n                    {message.role === 'assistant' && message.context_used && chatMode === 'rag' && (\n                      <div className=\"mt-2 text-xs text-primary-600 flex items-center\">\n                        âœ¨ Answered using knowledge base\n                      </div>\n                    )}\n\n                    {message.role === 'assistant' && message.sources && message.sources.length > 0 && (\n                      <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                        <p className=\"text-xs text-gray-600 mb-2\">ðŸ“„ Sources:</p>\n                        {message.sources.slice(0, 2).map((source, index) => (\n                          <div key={index} className=\"text-xs text-gray-500 bg-gray-50 p-2 rounded mb-1\">\n                            <div className=\"font-medium\">{source.filename}</div>\n                            {source.similarity_score && (\n                              <div className=\"text-primary-600\">{Math.round(source.similarity_score * 100)}% match</div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n              {loading && (\n                <div className=\"flex justify-start\">\n                  <div className=\"bg-gray-100 px-4 py-3 rounded-2xl\">\n                    <LoadingSpinner size=\"small\" />\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <div className=\"border-t border-gray-200 p-4 bg-gray-50\">\n          <form onSubmit={sendMessage} className=\"flex items-center space-x-3\">\n            <input\n              type=\"text\"\n              value={currentMessage}\n              onChange={(e) => setCurrentMessage(e.target.value)}\n              placeholder={chatMode === 'rag' ? \"Ask me anything about your documents...\" : \"Chat freely without documents...\"}\n              className=\"flex-1 input-field\"\n              disabled={loading}\n            />\n            <button\n              type=\"submit\"\n              disabled={loading || !currentMessage.trim()}\n              className=\"btn-primary px-4 disabled:opacity-50\"\n            >\n              {loading ? <LoadingSpinner size=\"small\" color=\"white\" /> : 'ðŸš€'}\n            </button>\n          </form>\n\n          <div className=\"flex items-center justify-between mt-2 text-xs text-gray-500\">\n            <span>ðŸ’¡ Tip: Upload documents in Knowledge Base to get better answers</span>\n            \n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from 'react';\n\nconst LoadingSpinner = ({ size = 'medium', color = 'primary', className = '' }) => {\n  const sizeClasses = {\n    small: 'h-4 w-4',\n    medium: 'h-8 w-8',\n    large: 'h-12 w-12',\n    xlarge: 'h-16 w-16'\n  };\n\n  const colorClasses = {\n    primary: 'border-primary-600',\n    gray: 'border-gray-600',\n    white: 'border-white'\n  };\n\n  return (\n    <div className={`flex items-center justify-center ${className}`}>\n      <div className={`loading-spinner ${sizeClasses[size]} ${colorClasses[color]}`} role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;"],"names":["messages","setMessages","useState","currentMessage","setCurrentMessage","conversations","setConversations","currentConversation","setCurrentConversation","loading","setLoading","conversationsLoading","setConversationsLoading","chatMode","setChatMode","messagesEndRef","useRef","useEffect","loadConversations","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","async","data","apiService","getConversations","length","err","toast","error","_jsxs","className","children","_jsx","onClick","startNewConversation","concat","disabled","title","LoadingSpinner","size","map","conversation","id","getConversationMessages","conversationId","find","c","loadConversation","dateString","created_at","Date","toLocaleDateString","month","day","hour","minute","_Fragment","message","role","content","context_used","sources","slice","source","index","filename","similarity_score","Math","round","ref","onSubmit","e","preventDefault","trim","userMessage","tempMessage","now","toISOString","prev","response","sendMessage","filter","msg","newMessages","conversation_id","substring","type","value","onChange","target","placeholder","color","_ref","small","medium","large","xlarge","primary","gray","white"],"sourceRoot":""}