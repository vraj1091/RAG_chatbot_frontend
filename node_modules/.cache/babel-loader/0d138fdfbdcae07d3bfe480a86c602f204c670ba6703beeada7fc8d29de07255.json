{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{apiService}from'../services/apiService.js';import toast from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export function useAuth(){const context=useContext(AuthContext);if(!context)throw new Error('useAuth must be used within an AuthProvider');return context;}export function AuthProvider(_ref){let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[isAuthenticated,setIsAuthenticated]=useState(false);useEffect(()=>{initializeAuth();},[]);const initializeAuth=async()=>{try{const token=localStorage.getItem('token');const savedUser=localStorage.getItem('user');if(token&&savedUser){try{const userData=await apiService.getCurrentUser();setUser(userData);setIsAuthenticated(true);}catch(err){localStorage.removeItem('token');localStorage.removeItem('user');setUser(null);setIsAuthenticated(false);}}}catch(err){console.error('Auth initialization error:',err);}finally{setLoading(false);}};const register=async(username,email,password)=>{try{setLoading(true);const response=await apiService.register(username,email,password);localStorage.setItem('token',response.access_token);localStorage.setItem('user',JSON.stringify(response.user));setUser(response.user);setIsAuthenticated(true);toast.success(\"Welcome \".concat(response.user.username,\"! Account created successfully.\"));return response;}catch(err){var _err$response,_err$response$data;const errorMessage=((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.detail)||'Registration failed';toast.error(errorMessage);throw new Error(errorMessage);}finally{setLoading(false);}};const login=async(username,password)=>{try{setLoading(true);const response=await apiService.login(username,password);localStorage.setItem('token',response.access_token);localStorage.setItem('user',JSON.stringify(response.user));setUser(response.user);setIsAuthenticated(true);toast.success(\"Welcome back \".concat(response.user.username,\"!\"));return response;}catch(err){var _err$response2,_err$response2$data;const errorMessage=((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.detail)||'Login failed';toast.error(errorMessage);throw new Error(errorMessage);}finally{setLoading(false);}};const logout=()=>{localStorage.removeItem('token');localStorage.removeItem('user');setUser(null);setIsAuthenticated(false);toast.success('Logged out successfully');};const value={user,isAuthenticated,loading,login,register,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}