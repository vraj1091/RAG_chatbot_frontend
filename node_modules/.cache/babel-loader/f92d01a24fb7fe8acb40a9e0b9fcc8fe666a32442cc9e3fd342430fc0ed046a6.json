{"ast":null,"code":"import axios from'axios';import toast from'react-hot-toast';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000/api/v1';class ApiService{constructor(){this.api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});this.api.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token)config.headers.Authorization=\"Bearer \".concat(token);return config;});this.api.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');localStorage.removeItem('user');window.location.href='/login';}return Promise.reject(error);});}async register(username,email,password){const response=await this.api.post('/auth/register',{username,email,password});return response.data;}async login(username,password){const formData=new FormData();formData.append('username',username);formData.append('password',password);const response=await this.api.post('/auth/token',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}async getCurrentUser(){const response=await this.api.get('/auth/me');return response.data;}async uploadDocument(file){let onUploadProgress=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const formData=new FormData();formData.append('file',file);const response=await this.api.post('/documents/upload',formData,{headers:{'Content-Type':'multipart/form-data'},onUploadProgress:onUploadProgress?progressEvent=>{const percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);onUploadProgress(percentCompleted);}:undefined});return response.data;}async getDocuments(){let skip=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;const response=await this.api.get(\"/documents/?skip=\".concat(skip,\"&limit=\").concat(limit));return response.data;}async deleteDocument(documentId){const response=await this.api.delete(\"/documents/\".concat(documentId));return response.data;}async getDocumentStats(){const response=await this.api.get('/documents/stats');return response.data;}// Updated sendMessage with error handling\nasync sendMessage(message){let conversationId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let mode=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'rag';const params=new URLSearchParams();if(mode)params.append('mode',mode);const url=\"/chat/?\".concat(params.toString());const payload={message};if(conversationId!==null&&conversationId!==undefined){payload.conversation_id=conversationId;}try{const response=await this.api.post(url,payload);return response.data;}catch(error){var _error$response2;console.error('sendMessage API error:',((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||error.message||error);toast.error('Error sending message, please try again.');throw error;}}async getConversations(){let skip=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;const response=await this.api.get(\"/chat/conversations?skip=\".concat(skip,\"&limit=\").concat(limit));return response.data;}async getConversationMessages(conversationId){let skip=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:50;const response=await this.api.get(\"/chat/conversations/\".concat(conversationId,\"/messages?skip=\").concat(skip,\"&limit=\").concat(limit));return response.data;}async deleteConversation(conversationId){const response=await this.api.delete(\"/chat/conversations/\".concat(conversationId));return response.data;}async getChatStats(){const response=await this.api.get('/chat/stats');return response.data;}}export const apiService=new ApiService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}